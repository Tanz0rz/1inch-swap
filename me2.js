const ethers = require("ethers");
const path = require("path");
const fs = require("fs");

// Connect to the local fork node
const provider = new ethers.providers.JsonRpcProvider("http://127.0.0.1:8545");

// Specify the contract address
const contractAddress = '0x111111125421ca6dc452d289314280a0f8842a65';

// Create a signer
const signer = provider.getSigner(); // Ensure your local node has unlocked accounts


// Load the ABI from the file system
const abiPath = path.join(__dirname, "abi/1inchV6ABI.json");
const abi = JSON.parse(fs.readFileSync(abiPath, "utf8"));

// Connect to the contract
const contract = new ethers.Contract(contractAddress, abi, provider);

async function sendRawBinaryData() {
    // Manually encode function call data, assuming you want to call "swap" function from 1inch router
    const swapFunction = contract.interface.getFunction("swap");

    // Prepare the parameters for the swap function
    const desc = {
        srcToken: '0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE', // Example: ETH
        dstToken: '0x6B175474E89094C44Da98b954EedeAC495271d0F', // Example: DAI
        srcReceiver: await signer.getAddress(),
        dstReceiver: await signer.getAddress(),
        amount: ethers.utils.parseEther("1"), // 1 ETH
        minReturnAmount: ethers.utils.parseEther("300"), // Minimum return in DAI
        flags: 0,
        permit: "0x" // No permit in this example
    };

    // Encode the transaction data using the ABI
    // const calldata = contract.interface.encodeFunctionData(swapFunction, [desc, "0x"]);
    const calldata = "0x12aa3caf000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd09000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000056bc75e2d63100000000000000000000000000000000000000000000000000000000000378ffd93df000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004a900000000000000000000000000000000000000048b00045d0004130003f900a0c9e75c48000000000000000008020000000000000000000000000000000000000000000000000003cb0001ef00a007e5c0d20000000000000000000000000000000000000000000000000001cb00011b00a0c9e75c4800000000000000210b060000000000000000000000000000000000000000000000ed00009e00004f02a00000000000000000000000000000000000000000000000000000000151f21521ee63c1e50111b815efb8f581194ae79006d24e0d814b7697f6c02aaa39b223fe8d0a0e5c4f27ead9083c756cc202a0000000000000000000000000000000000000000000000000000000026b8fe258ee63c1e5016ca298d2983ab03aa1da7679389d955a4efee15cc02aaa39b223fe8d0a0e5c4f27ead9083c756cc202a00000000000000000000000000000000000000000000000000000000743480e00ee63c1e501c7bbec68d12a0d1830360f8ec58fa599ba1b0e9bc02aaa39b223fe8d0a0e5c4f27ead9083c756cc25120c9f93163c99695c6526b799ebca2207fdf7d61addac17f958d2ee523a2206206994597c13d831ec700048dae733300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b00c4453a0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000a0c9e75c4800000000000000260a020000000000000000000000000000000000000000000001ae00015f00004f02a000000000000000000000000000000000000000000000000000000001c2a8a1ccee63c1e500e0554a476a092703abdb3ef35c80e0d76d32939fc02aaa39b223fe8d0a0e5c4f27ead9083c756cc25100d17b3c9784510e33cd5b87b490e79253bcd81e2ec02aaa39b223fe8d0a0e5c4f27ead9083c756cc2004458d30ac9000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008cd95bb970000000000000000000000000000000000000000000000000000000000000000000000000000000000000000e37e799d5077682fa0a244d46e5649f71457bd090000000000000000000000000000000000000000000000000000000066e771e402a00000000000000000000000000000000000000000000000000000002170bd86d0ee63c1e50088e6a0c2ddd26feeb64f039a2c41296fcb3f5640c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20020d6bdbf78a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800a0f2fa6b66a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000378ffd93df000000000000000000000000004c660b80a06c4eca27a0b86991c6218b36c1d19d4a2e9eb0ce3606eb481111111254eeb25477b68fb85ed929f73a96058200000000000000000000000000000000000000000000001164d111"

    // Create the transaction object
    const tx = {
        to: contractAddress,
        data: calldata,
        value: ethers.utils.parseEther("1") // 1 ETH to send
    };

    // Send the transaction
    try {
        const txResponse = await signer.sendTransaction(tx);
        console.log("Transaction sent! Hash:", txResponse.hash);

        // Wait for confirmation
        const receipt = await txResponse.wait();
        console.log("Transaction confirmed in block", receipt.blockNumber);
    } catch (error) {
        console.error("Error sending transaction:", error);
    }
}

sendRawBinaryData();
